Design Doc
Elijah Cordova
CruzID: ejcordov
CMPS111, Fall 2018

1. Goal

The goal of this program is :
  ~ Provided any number of files, print the last ten lines of the files(in the order specified, if a file cannot be open or read stop the process immediately).
  ~ Provided no files, copy standard input to standard output

2. Assumptions
I assume that newlines are represented by \n. So, this program will only hold up to POSIX standards, and the number of lines in the program should be equal to
the amount of newlines in the program, the character buffer size will be [4096], and will only be guaranteed to work on *nix systems.
However, I have to account for the fact that the last line might not end in \n.

3. Design
The approach I'm going to take is to read the file into a buffer using syscall read(), then iterate it over backwards, looking for the character '\n'. 
The program not only takes into account how many newlines are counted so far, but also the amount of non exit ('\0') characters read so far and the current index the iteration is at. 
The iteration stops once the 11th newline is found, or at 0 (the beginning of the file). From there, we will use the write() system call to write:
-From: the index starting from the index the loop terminated (which should be 0 (the start of the file , this case is a file with less then 10 lines) or the place where the loop 
terminated (this is the case of a file with 10 lines or more).) 
-To: stdout (1)
-How many bytes to write: The amount of non exit ('\0') which should be counted via the iteration
After that, we do another write syscall to write the exit code ('\0'). The entire program will work with multiple files and execute the program sequentially. If a file cannot be
open or read, perror() will be thrown and terminate the program with an error code.
