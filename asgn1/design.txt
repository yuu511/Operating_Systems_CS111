Design Doc: Assignment 1
Elijah Cordova
CruzID: ejcordov
CMPS111, Fall 2018

1. Goal
  -> Create a simple shell, which must:
  -> Be able to perform commands with / without flags
  -> Be able to handle special arguments: 
    -> <target> < <source> : <Target> takes input from <source> 
    -> <target> > <source>,
       <target> >> <source>: Take output of <target> and redirect to <source>
         -> > form : overwrites whatever is in <source> , >> form : append to end of file
    -> <target> | <source> Pipes output of <target> to <source>
    -> <target> ( >, >>, | ) & <source> : Standard error redirected to standard output
    -> <target 1 > (any command sequence 1) <source 1> ; <target 2 > (any command sequence 2) <source 2>; ... ;<target n > (any command sequence n) <source n>:
      Run multiple commands in a sequential order
  -> Be able to change the working directory with %cd

2. Assumptions
I assume that argshell.c parses arguments by seperation of a white space. I must make sure that
the shell will continuosly execute and have a prompt and print that prompt every time the shell
calls a command.

3. Design
The approach I'm going to take is to have an infintiely running loop. In the loop, First print the 
prompt (Given as Command:) which will be an indicator of whether or not a process is running or not. Second, read ALL arguments, making
sure not to execute anything. If the first argument is 'cd', execute cd. 
Based on the arguments: determine the flags and/or any special characters (< > >> | & ;) 
that the line has. Any command with the special characters will be run through a special input/output related function.
If any of the chracters is not recognized, then throw an error and resume the loop from step one again, 
Third, after parsing the special characters, execute the command(s).

